apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.serviceA.name }}
spec:
  replicas: {{ .Values.serviceA.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.serviceA.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.serviceA.name }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
        - name: {{ .Values.serviceA.name }}
          image: "{{ .Values.serviceA.image.repository }}:{{ .Values.serviceA.image.tag }}"
          imagePullPolicy: {{ .Values.serviceA.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.serviceA.port }}
          volumeMounts:
            - name: service-logs
              mountPath: /var/log/service-a
        - name: promtail
          image: grafana/promtail:2.8.0
          args:
            - -config.file=/etc/promtail/promtail.yaml
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
          volumeMounts:
            - name: promtail-config
              mountPath: /etc/promtail
            - name: service-logs
              mountPath: /var/log/service-a
      volumes:
        - name: promtail-config
          configMap:
            name: promtail-config
        - name: service-logs
          emptyDir:
            sizeLimit: 10Mi
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.serviceA.name }}
spec:
  selector:
    app: {{ .Values.serviceA.name }}
  ports:
    - port: 80
      targetPort: {{ .Values.serviceA.port }}
  type: ClusterIP
